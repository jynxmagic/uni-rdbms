---          ###TITLE MIGRATION###                   --- 
---  here, columns are updated individually using    ---
---  the pk. there is duplicate data and we don't    ---
---  want to ovveride correct values with null.      ---

---drop existing data
DELETE FROM title;

--- insert title_ids, skip duplicates.
--- refs: https://richardfoote.wordpress.com/2010/12/20/oracle11g-ignore_row_on_dupkey_index-hint-micro-cuts/
--- 10/03/2020
INSERT /*+ ignore_row_on_dupkey_index(title(title_id)) */ INTO TITLE(TITLE_ID)
SELECT TITLE_ID
FROM OLD_TITLES;
COMMIT;


---update columns
---refs: https://docs.oracle.com/cd/B28359_01/server.111/b28286/statements_9016.htm#SQLRF01606
---10/03/2020
---title---
MERGE INTO title n
USING (SELECT DISTINCT title_id,
                title 
      FROM old_titles WHERE TITLE IS NOT NULL      
      ) o
ON(n.title_id=o.title_id)
WHEN MATCHED THEN
    UPDATE SET n.title = o.title;
    COMMIT;
---released----
MERGE INTO title n
USING (SELECT DISTINCT title_id, released
        FROM old_titles WHERE released IS NOT NULL) o
ON(n.title_id = o.title_id)        
WHEN MATCHED THEN
    UPDATE SET n.released = o.released;
    COMMIT;
---runtime----
MERGE INTO title n
USING (SELECT DISTINCT TITLE_ID, RUNTIME
        FROM OLD_TITLES WHERE RUNTIME IS NOT NULL) o
ON(n.title_id = o.title_id)
WHEN MATCHED THEN
    UPDATE SET n.runtime = o.runtime;
    COMMIT;

--counts to verify data---
SELECT COUNT(*) AS "NULL TITLES" FROM TITLE WHERE TITLE IS NULL;
SELECT COUNT(*) AS "NULL RELEASED" FROM TITLE WHERE RELEASED IS NULL;
SELECT COUNT(TITLE_ID) AS "NULL RUNTIMES" FROM TITLE WHERE RUNTIME IS NULL; --- 600 rows null :(. needs verification


---          ###NAMES MIGRATION###                   --- 
--- same process as title. ignore dupe keys then     ---
--- update the data with the duplicate inputs        ---


--drop existing data
DELETE FROM PERSON;
COMMIT;

--insert pks
INSERT /*+ ignore_row_on_dupkey_index(person(person_id)) */ INTO PERSON(PERSON_ID)
SELECT NAME_ID
FROM OLD_NAMES;
COMMIT;
--update columns
--name
MERGE INTO PERSON P
USING (SELECT DISTINCT NAME_ID, NAME FROM OLD_NAMES WHERE NAME IS NOT NULL) O
ON(P.PERSON_ID=O.NAME_ID)
WHEN MATCHED THEN 
    UPDATE SET P.NAME = O.NAME;
    COMMIT;
--birth year
MERGE INTO PERSON P
USING (SELECT DISTINCT NAME_ID, BIRTHYEAR FROM OLD_NAMES WHERE BIRTHYEAR IS NOT NULL) O
ON(P.PERSON_ID = O.NAME_ID)
WHEN MATCHED THEN
    UPDATE SET P.BIRTH_YEAR = O.BIRTHYEAR;
    COMMIT;
--death year
MERGE INTO PERSON P
USING(SELECT DISTINCT NAME_ID, DEATHYEAR FROM OLD_NAMES WHERE DEATHYEAR IS NOT NULL) O
ON(P.PERSON_ID=O.NAME_ID)
WHEN MATCHED THEN
    UPDATE SET P.DEATH_YEAR=O.DEATHYEAR;
    COMMIT;

SELECT NAME AS "GUY WE DON`T LIKE" FROM PERSON WHERE LENGTH(NAME) > 35 ; -- we don't like this guy

SELECT COUNT(*) AS "NULL NAMES" FROM PERSON WHERE NAME IS NULL;
SELECT COUNT(PERSON_ID) AS "NULL BIRTH YEARS" FROM PERSON WHERE BIRTH_YEAR IS NULL;
SELECT COUNT(PERSON_ID) AS "NULL DEATH YEARS" FROM PERSON WHERE DEATH_YEAR IS NULL; -- lots of nulls.

---          ###PROFESSION MIGRATION###                 --- 

--CLEAR TABLE
DELETE FROM PROFESSION;
--create temp table to hold distinct professions. it's done this way as pk is auto_increment on profession. profession is also not unique - we don't want dupe values during migration
CREATE TABLE temp_professions(
profession varchar(255) UNIQUE
);

COMMIT;

INSERT INTO TEMP_PROFESSIONS(PROFESSION)
SELECT DISTINCT PROFESSION1 FROM OLD_NAMES;
COMMIT;
--profession2
--skip dupes again
INSERT /*+ ignore_row_on_dupkey_index(temp_professions(profession)) */ INTO TEMP_PROFESSIONS(profession) 
SELECT DISTINCT PROFESSION2 FROM OLD_NAMES;
COMMIT;
--profession3
--skip dupes
INSERT /*+ ignore_row_on_dupkey_index(temp_professions(profession)) */ INTO TEMP_PROFESSIONS(profession) 
SELECT DISTINCT PROFESSION3 FROM OLD_NAMES;
COMMIT;


--merge temp table into profession table
INSERT INTO PROFESSION(PROFESSION)
SELECT profession 
FROM temp_professions
WHERE profession IS NOT NULL; --ensure no null values came along
COMMIT;
--delete temp table
DROP TABLE TEMP_PROFESSIONS;
COMMIT;

---          ###PERSON PROFESSION MIGRATION###           ---

--DELETE DATA
DELETE FROM PERSON_PROFESSION;

---profession1
INSERT INTO PERSON_PROFESSION P
SELECT NAME_ID, (SELECT PROFESSION_ID FROM PROFESSION WHERE PROFESSION = O.PROFESSION1)
FROM OLD_NAMES O
WHERE O.PROFESSION1 IS NOT NULL;
COMMIT;

--profession2
INSERT INTO PERSON_PROFESSION P
SELECT NAME_ID, (SELECT PROFESSION_ID FROM PROFESSION WHERE PROFESSION = O.PROFESSION2)
FROM OLD_NAMES O
WHERE O.PROFESSION2 IS NOT NULL;
COMMIT;

--profession3
INSERT INTO PERSON_PROFESSION P
SELECT NAME_ID, (SELECT PROFESSION_ID FROM PROFESSION WHERE PROFESSION = O.PROFESSION3)
FROM OLD_NAMES O
WHERE O.PROFESSION3 IS NOT NULL;
COMMIT;

--verify, show ppl and amnt of professions they have
SELECT DISTINCT PERSON_ID AS "PERSON", COUNT(PROFESSION_ID) AS "# OF PROFESSIONS" FROM PERSON_PROFESSION GROUP BY PERSON_ID ORDER BY COUNT(PROFESSION_ID) DESC FETCH FIRST 200 ROWS ONLY ;


---          ###PERSON TITLEs  MIGRATION###             ---

--delete data
DELETE FROM PERSON_TITLE;

--knownfortitles1
INSERT INTO PERSON_TITLE(PERSON_ID,TITLE_ID)
    SELECT O.NAME_ID, O.KNOWNFORTITLES1
    FROM OLD_NAMES O
    WHERE KNOWNFORTITLES1 IS NOT NULL
    AND KNOWNFORTITLES1 IN (SELECT TITLE_ID FROM TITLE); -- see comment after inserts 
COMMIT;

--knownfortitles2
INSERT INTO PERSON_TITLE(PERSON_ID,TITLE_ID)
    SELECT O.NAME_ID, O.KNOWNFORTITLES2
    FROM OLD_NAMES O
    WHERE KNOWNFORTITLES2 IS NOT NULL
    AND KNOWNFORTITLES2 IN (SELECT TITLE_ID FROM TITLE);
COMMIT;

--knownfortitles3
INSERT INTO PERSON_TITLE(PERSON_ID, TITLE_ID)
    SELECT O.NAME_ID, O.KNOWNFORTITLES3
    FROM OLD_NAMES O
    WHERE KNOWNFORTITLES3 IS NOT NULL
    AND KNOWNFORTITLES3 IN (SELECT TITLE_ID FROM TITLE);
COMMIT;    

--knownfortitles4
INSERT INTO PERSON_TITLE(PERSON_ID, TITLE_ID)
    SELECT O.NAME_ID, O.KNOWNFORTITLES4
    FROM OLD_NAMES O
    WHERE KNOWNFORTITLES4 IS NOT NULL
    AND KNOWNFORTITLES4 IN (SELECT TITLE_ID FROM TITLE);
COMMIT;


-- SOME TITLES DON'T EXISTS ---
--- CODE USED TO CHECK
---SELECT COUNT(TITLE_ID) FROM OLD_TITLES WHERE TITLE_ID NOT IN (SELECT TITLE_ID FROM TITLE);
---SELECT COUNT(KNOWNFORTITLES1) FROM OLD_NAMES WHERE KNOWNFORTITLES1 NOT IN (SELECT TITLE_ID FROM TITLE);
--SELECT KNOWNFORTITLES1 FROM OLD_NAMES WHERE KNOWNFORTITLES1 NOT IN (SELECT TITLE_ID FROM TITLE);
---SELECT * FROM OLD_TITLES 
--WHERE OLD_TITLES.TITLE_ID = 'tt0061055';
---SELECT COUNT(TITLE_ID) FROM TITLE;
--IT APPEARS SOME TITLES WHERE DELETED AFTER "KNOWNFORTITLES" COLUMN WAS UPDATED.


--verification
SELECT DISTINCT PERSON_ID, COUNT(TITLE_ID) AS "# OF TITLES" FROM PERSON_TITLE GROUP BY PERSON_ID ORDER BY COUNT(TITLE_ID) DESC FETCH FIRST 200 ROWS ONLY;
SELECT * FROM OLD_NAMES WHERE NAME_ID = 'nm0089294';
--ya das ist gut


---          ###DIRECTOR  MIGRATION###            ---
